<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" ignored="3" total="24" passed="19">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="256" started-at="2017-12-18T22:38:29Z" finished-at="2017-12-18T22:38:29Z">
    <groups>
      <group name="functional">
        <method signature="TestClass2.testClass2Method4()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method4" class="test.sagar.sample.sampleCodes.TestClass2"/>
        <method signature="TestClass2.testClass2Method5()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method5" class="test.sagar.sample.sampleCodes.TestClass2"/>
      </group> <!-- functional -->
      <group name="regression">
        <method signature="TestClass1.testClass1Method3()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method3" class="test.sagar.sample.sampleCodes.TestClass1"/>
        <method signature="TestClass1.testClass1Method4()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method4" class="test.sagar.sample.sampleCodes.TestClass1"/>
        <method signature="TestClass1.testClass1Method5()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method5" class="test.sagar.sample.sampleCodes.TestClass1"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="TestClass2.testClass2Method1()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method1" class="test.sagar.sample.sampleCodes.TestClass2"/>
        <method signature="TestClass2.testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" class="test.sagar.sample.sampleCodes.TestClass2"/>
      </group> <!-- smoke -->
      <group name="sanity">
        <method signature="TestClass1.testClass1Method2(org.testng.ITestContext)[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method2" class="test.sagar.sample.sampleCodes.TestClass1"/>
        <method signature="TestClass1.testClass1Method1(java.lang.String)[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method1" class="test.sagar.sample.sampleCodes.TestClass1"/>
      </group> <!-- sanity -->
      <group name="pageObject">
        <method signature="SalesforceTest.init()[pri:0, instance:test.PageObjectModel.SalesforceTest@668bc3d5]" name="init" class="test.PageObjectModel.SalesforceTest"/>
      </group> <!-- pageObject -->
    </groups>
    <test name="Command line test" duration-ms="256" started-at="2017-12-18T22:38:29Z" finished-at="2017-12-18T22:38:29Z">
      <class name="test.PageObjectModel.BaseTest">
        <test-method status="PASS" signature="initialize()[pri:0, instance:test.PageObjectModel.BaseTest@380fb434]" name="initialize" is-config="true" duration-ms="10711" started-at="2017-12-19T04:08:18Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method status="PASS" signature="TeardownTest()[pri:0, instance:test.PageObjectModel.BaseTest@380fb434]" name="TeardownTest" is-config="true" duration-ms="1028" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TeardownTest -->
      </class> <!-- test.PageObjectModel.BaseTest -->
      <class name="test.sagar.sample.sampleCodes.TestClass2">
        <test-method status="PASS" signature="testClass2Method1()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method1" duration-ms="1" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method1 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="2" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="2" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="1" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="1" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="1" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="1" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="0" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="0" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="0" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method2()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method2" duration-ms="0" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method2 -->
        <test-method status="PASS" signature="testClass2Method4()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method4" duration-ms="0" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method4 -->
        <test-method status="SKIP" signature="testClass2Method5()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass2@7a5d012c]" name="testClass2Method5" duration-ms="2" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[Skipping - This is not ready for testing ]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: Skipping - This is not ready for testing 
	at test.sagar.sample.sampleCodes.TestClass2.testClass2Method5(TestClass2.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass2Method5 -->
      </class> <!-- test.sagar.sample.sampleCodes.TestClass2 -->
      <class name="test.PageObjectModel.SalesforceTest">
        <test-method status="PASS" signature="init()[pri:0, instance:test.PageObjectModel.SalesforceTest@668bc3d5]" name="init" duration-ms="214" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
      </class> <!-- test.PageObjectModel.SalesforceTest -->
      <class name="test.sagar.sample.sampleCodes.TestClass1">
        <test-method status="PASS" signature="testClass1Method3()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method3" duration-ms="1" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass1Method3 -->
        <test-method status="PASS" signature="testClass1Method4()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method4" duration-ms="0" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass1Method4 -->
        <test-method status="PASS" signature="testClass1Method5()[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method5" duration-ms="0" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass1Method5 -->
        <test-method status="PASS" signature="testClass1Method2(org.testng.ITestContext)[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method2" duration-ms="1" depends-on-groups="smoke" started-at="2017-12-19T04:08:29Z" finished-at="2017-12-19T04:08:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@20f5239f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass1Method2 -->
        <test-method status="FAIL" signature="testClass1Method1(java.lang.String)[pri:0, instance:test.sagar.sample.sampleCodes.TestClass1@3cda1055]" name="testClass1Method1" duration-ms="0" started-at="2017-12-19T04:08:29Z" depends-on-methods="test.sagar.sample.sampleCodes.TestClass1.testClass1Method2" finished-at="2017-12-19T04:08:29Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Parameter 'browser' is required by @Test on method testClass1Method1 but has not been marked @Optional or defined
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Parameter 'browser' is required by @Test on method testClass1Method1 but has not been marked @Optional or defined

	at org.testng.internal.Parameters.createParameters(Parameters.java:199)
	at org.testng.internal.Parameters.createParameters(Parameters.java:443)
	at org.testng.internal.Parameters.handleParameters(Parameters.java:569)
	at org.testng.internal.Invoker.handleParameters(Invoker.java:1308)
	at org.testng.internal.Invoker.createParameters(Invoker.java:1036)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1126)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClass1Method1 -->
      </class> <!-- test.sagar.sample.sampleCodes.TestClass1 -->
      <class name="test.sagar.sample.sampleCodes.testNgTest">
        <test-method status="PASS" signature="test1(java.util.List, java.lang.String, int)[pri:0, instance:test.sagar.sample.sampleCodes.testNgTest@79b4d0f]" name="test1" duration-ms="1" started-at="2017-12-19T04:08:29Z" data-provider="DataProviderforArrayList2" finished-at="2017-12-19T04:08:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Mango, Watermelon, Chikoo, Pineapple, Cherry]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[fruitList]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method status="PASS" signature="test1(java.util.List, java.lang.String, int)[pri:0, instance:test.sagar.sample.sampleCodes.testNgTest@79b4d0f]" name="test1" duration-ms="0" started-at="2017-12-19T04:08:29Z" data-provider="DataProviderforArrayList2" finished-at="2017-12-19T04:08:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[XUV500, Compass, TUV300, Swift, Nexon]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[carList]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
      </class> <!-- test.sagar.sample.sampleCodes.testNgTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
